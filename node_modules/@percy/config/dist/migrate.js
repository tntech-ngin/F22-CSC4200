"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMigration = addMigration;
exports.clearMigrations = clearMigrations;
exports.default = migrate;

var _logger = _interopRequireDefault(require("@percy/logger"));

var _utils = require("./utils");

var _normalize2 = _interopRequireDefault(require("./normalize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Global set of registered migrations
const migrations = new Map(); // Register a migration function for the main config schema by default

function addMigration(migration, schema = '/config') {
  if (Array.isArray(migration)) {
    // accept schema as the first item in a tuple
    if (typeof migration[0] === 'string') [schema, ...migration] = migration;
    return migration.map(m => addMigration(m, schema));
  }

  if (!migrations.has(schema)) migrations.set(schema, []);
  migrations.get(schema).unshift(migration);
  return migration;
} // Clear all migration functions


function clearMigrations() {
  migrations.clear();
  addMigration(defaultMigration);
} // The default config migration


addMigration(defaultMigration);

function defaultMigration(config, {
  set
}) {
  if (config.version !== 2) set('version', 2);
} // Calls each registered migration function with a normalize provided config
// and util functions for working with the config object


function migrate(config, schema = '/config') {
  var _normalize;

  config = (_normalize = (0, _normalize2.default)(config, {
    schema
  })) !== null && _normalize !== void 0 ? _normalize : {};

  if (migrations.has(schema)) {
    let util = {
      set: _utils.set.bind(null, config),
      map: _utils.map.bind(null, config),
      del: _utils.del.bind(null, config),
      log: (0, _logger.default)('config')
    };

    for (let migration of migrations.get(schema)) {
      migration(config, util);
    } // normalize again to adjust for migrations


    config = (0, _normalize2.default)(config, {
      schema
    });
  }

  return config;
}